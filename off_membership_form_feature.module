<?php
/**
 * @file
 * Code for the OFF Membership Form Feature feature.
 */

include_once 'off_membership_form_feature.features.inc';


/**
 * Implements hook_menu().
 */

function off_membership_form_feature_menu() {
  $items['membership/pay'] = array(
    'page callback' => 'off_membership_form_feature_payment_page',
    'access callback' => TRUE,
    //'page arguments' => array(1, 'foo'),
  );
  return $items;
}

function off_membership_form_feature_entity_insert($entity, $type) {
  // Copy the entityform id to the session variable to be used in the subsequent payment.
  if ($type === 'entityform') {
    $info = entity_get_info($type);
    list($id) = entity_extract_ids($type, $entity);
    $entityform_wrapper = entity_metadata_wrapper('entityform', $entity);
    drupal_session_start();
    $_SESSION['off_membership_form_feature']['entityform_id'] = $entityform_wrapper->getIdentifier();
  }
}

/**
 * Create payment and line item objects and return a payment form.
 *
 * @return array
 *   A Drupal build array.
 */

function off_membership_form_feature_payment_page() {
  $entityform_id = $_SESSION['off_membership_form_feature']['entityform_id'];
  $entityform = entityform_load($entityform_id);
  // Load the user selected subscription type taxonomy term.
  $term = taxonomy_term_load($entityform->field_mf_subscription_type['und'][0]['tid']);
  // Create the payment object.
  $payment = new Payment(array(
    // The id of the entityform is attached here for entity referencing later.
    'context_data' => array(
      'entityform_id' => $entityform_id,
    ),
    // Use the currency from the user selected subscription type.
    'currency_code' => $term->field_mf_amount['und'][0]['currency'],
    'description' => t('Pay for your membership subscription'),
    'finish_callback' => 'off_membership_form_feature_process_payment',
  ));
  // Create a payment line item object.
  $payment->setLineItem(new PaymentLineItem(array(
    // Use the amount and description from the user selected subscription type.
    'amount' => $term->field_mf_amount['und'][0]['amount'],
    'description' => $term->description,
    'name' => strtolower("off_membership_form_feature_{$term->name}_payment"),
  )));

  return drupal_get_form('payment_form_standalone', $payment);
}

/**
 * Add the id of the payment to the original entityform in an
 * entityreference field, linking form and payment.
 * 
 * @param object $element
 */

function off_membership_form_feature_process_payment($element) {
  $entityform_id = $element->context_data['entityform_id'];
  $entityform = entityform_load($entityform_id);
  $entityform->field_mf_payment_ref['und'][0]['target_id'] = $element->pid;
  entityform_save($entityform);
}


/**
 * Implements hook_field_widget_properties_ENTITY_TYPE_alter().
 */
function off_membership_form_feature_field_widget_form_alter(&$element, &$form_state, $context) {
  if (($context['field']['field_name'] == 'field_mf_subscription_type') && 
    ($form_state['build_info']['form_id'] === 'membership_form_entityform_edit_form')) {
    foreach($element['#options'] as $tid => $label) {
      $term = taxonomy_term_load($tid);
      $term_array = taxonomy_term_view_multiple(array($tid => $term), 'teaser');
      $element['#options'][$tid] = drupal_render($term_array);
    }
  }
}

/**
 * Implements hook_form_alter().
 */

function off_membership_form_feature_form_alter(&$form, &$form_state, $form_id) {
  // Cleanup form.
  if ($form_id === 'membership_form_entityform_edit_form') {
    // Remove payment ref. This is populated automatically.
    unset($form['field_mf_payment_ref']);
    // Remove address title, its confusing in this context.
    unset($form['field_mf_address']['und'][0]['#title']);
  }
}
